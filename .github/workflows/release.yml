name: Create Release on Tag Push

on:
  push:
    tags:
      - "v*"

# Ê∑ªÂä†ÂøÖË¶ÅÁöÑÊùÉÈôê‰ª•ÂàõÂª∫ release
permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout with full history for changelog generation
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install Node.js
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"

      # Install pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        id: pnpm-install
        with:
          version: 8
          run_install: false

      # Get pnpm store directory
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      # Setup pnpm cache
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install dependencies
      - name: Install dependencies
        run: pnpm install

      # Build for production, Ëøô‰∏ÄÊ≠•‰ºöÁîüÊàê‰∏Ä‰∏™ package.zip
      - name: Build for production
        run: pnpm build

      # Extract version from tag
      - name: Extract version
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT

      # Generate release notes from CHANGELOG.md
      - name: Extract release notes
        id: extract_notes
        run: |
          VERSION=${{ steps.extract_version.outputs.VERSION }}
          # Extract the section for this version from CHANGELOG.md
          if [ -f "CHANGELOG.md" ]; then
            # Try different version formats: [v1.0.0], [1.0.0], v1.0.0, 1.0.0
            VERSION_NO_V=${{ steps.extract_version.outputs.VERSION_NUMBER }}
            
            # Try format: ## [v1.0.0]
            awk "/^## \\[$VERSION\\]/,/^## \\[/ { if (/^## \\[/ && !/^## \\[$VERSION\\]/) exit; if (!/^## \\[$VERSION\\]/) print }" CHANGELOG.md > release_notes.txt
            
            # If not found, try format: ## [1.0.0]
            if [ ! -s release_notes.txt ]; then
              awk "/^## \\[$VERSION_NO_V\\]/,/^## \\[/ { if (/^## \\[/ && !/^## \\[$VERSION_NO_V\\]/) exit; if (!/^## \\[$VERSION_NO_V\\]/) print }" CHANGELOG.md > release_notes.txt
            fi
            
            # If not found, try format: ## v1.0.0
            if [ ! -s release_notes.txt ]; then
              awk "/^## $VERSION/,/^## [0-9v]/ { if (/^## [0-9v]/ && !/^## $VERSION/) exit; if (!/^## $VERSION/) print }" CHANGELOG.md > release_notes.txt
            fi
            
            # If not found, try format: ## 1.0.0
            if [ ! -s release_notes.txt ]; then
              awk "/^## $VERSION_NO_V/,/^## [0-9]/ { if (/^## [0-9]/ && !/^## $VERSION_NO_V/) exit; if (!/^## $VERSION_NO_V/) print }" CHANGELOG.md > release_notes.txt
            fi
            # If still empty, provide default content
            if [ ! -s release_notes.txt ]; then
              cat > release_notes.txt << 'EOL'
          ## üöÄ Êñ∞ÁâàÊú¨ÂèëÂ∏É
          
          Êú¨ÁâàÊú¨ÂåÖÂê´ÂäüËÉΩÊîπËøõÂíåÈóÆÈ¢ò‰øÆÂ§ç„ÄÇ
          
          ### üìã ÂÆåÊï¥Êõ¥Êñ∞Êó•Âøó
          
          ËØ∑Êü•Áúã [CHANGELOG.md](./CHANGELOG.md) Ëé∑ÂèñËØ¶ÁªÜ‰ø°ÊÅØ„ÄÇ
          EOL
            fi
          else
            cat > release_notes.txt << 'EOL'
          ## üöÄ Êñ∞ÁâàÊú¨ÂèëÂ∏É
          
          Êú¨ÁâàÊú¨ÂåÖÂê´ÂäüËÉΩÊîπËøõÂíåÈóÆÈ¢ò‰øÆÂ§ç„ÄÇ
          EOL
          fi
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Create GitHub Release
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "package.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          name: "AList Êñá‰ª∂ÊµèËßàÂô®Êèí‰ª∂ ${{ steps.extract_version.outputs.VERSION }}"
          body: ${{ steps.extract_notes.outputs.RELEASE_NOTES }}
          generateReleaseNotes: false
          makeLatest: true
          removeArtifacts: true
